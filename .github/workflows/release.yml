name: Release

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  check-version:
    name: Check Version Change
    runs-on: ubuntu-latest
    outputs:
      version_changed: ${{ steps.version_check.outputs.changed }}
      new_version: ${{ steps.version_check.outputs.version }}
      should_release: ${{ steps.version_check.outputs.should_release }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      
      - name: Check if version changed
        id: version_check
        run: |
          # Get current version from Cargo.toml
          CURRENT_VERSION=$(grep '^version' Cargo.toml | head -1 | sed 's/.*"\(.*\)".*/\1/')
          echo "Current version: $CURRENT_VERSION"
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          
          # If this is a tag push, always release
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            echo "Tag push detected - will release"
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "should_release=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # If this is a manual workflow dispatch, always release
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "Manual workflow dispatch - will release"
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "should_release=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Check if this is a push to main
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            # Check if Cargo.toml was modified in this push
            if git diff --name-only HEAD^ HEAD | grep -q "^Cargo.toml$"; then
              # Get previous version
              PREVIOUS_VERSION=$(git show HEAD^:Cargo.toml | grep '^version' | head -1 | sed 's/.*"\(.*\)".*/\1/')
              echo "Previous version: $PREVIOUS_VERSION"
              
              if [[ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]]; then
                echo "Version changed from $PREVIOUS_VERSION to $CURRENT_VERSION"
                echo "changed=true" >> $GITHUB_OUTPUT
                echo "should_release=true" >> $GITHUB_OUTPUT
              else
                echo "Cargo.toml changed but version stayed the same"
                echo "changed=false" >> $GITHUB_OUTPUT
                echo "should_release=false" >> $GITHUB_OUTPUT
              fi
            else
              echo "Cargo.toml not modified in this push"
              echo "changed=false" >> $GITHUB_OUTPUT
              echo "should_release=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "Not a main branch push"
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "should_release=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Create tag for new version
        if: steps.version_check.outputs.should_release == 'true' && !startsWith(github.ref, 'refs/tags/')
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "v${{ steps.version_check.outputs.version }}" -m "Release v${{ steps.version_check.outputs.version }}"
          git push origin "v${{ steps.version_check.outputs.version }}"

  build:
    name: Build ${{ matrix.platform }}
    needs: check-version
    if: needs.check-version.outputs.should_release == 'true'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # macOS builds
          - os: macos-latest
            target: x86_64-apple-darwin
            platform: macos-x86_64
            artifact_name: table-to-csv
            
          - os: macos-latest
            target: aarch64-apple-darwin
            platform: macos-aarch64
            artifact_name: table-to-csv
          
          # Linux builds
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            platform: linux-x86_64
            artifact_name: table-to-csv
          
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            platform: linux-aarch64
            artifact_name: table-to-csv
          
          # Windows build
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            platform: windows-x86_64
            artifact_name: table-to-csv.exe

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      - name: Install cross-compilation tools (Linux ARM64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
      
      - name: Build
        run: cargo build --release --target ${{ matrix.target }}
      
      - name: Package binary (Unix)
        if: runner.os != 'Windows'
        run: |
          cd target/${{ matrix.target }}/release
          tar -czf table-to-csv-${{ matrix.platform }}.tar.gz ${{ matrix.artifact_name }}
          mv table-to-csv-${{ matrix.platform }}.tar.gz ${{ github.workspace }}/
      
      - name: Package binary (Windows)
        if: runner.os == 'Windows'
        run: |
          cd target/${{ matrix.target }}/release
          7z a table-to-csv-${{ matrix.platform }}.zip ${{ matrix.artifact_name }}
          move table-to-csv-${{ matrix.platform }}.zip ${{ github.workspace }}/
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: table-to-csv-${{ matrix.platform }}
          path: |
            table-to-csv-${{ matrix.platform }}.tar.gz
            table-to-csv-${{ matrix.platform }}.zip
          if-no-files-found: ignore

  release:
    name: Create Release
    needs: [check-version, build]
    runs-on: ubuntu-latest
    if: needs.check-version.outputs.should_release == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: Prepare release files
        run: |
          mkdir -p release
          find artifacts -type f \( -name "*.tar.gz" -o -name "*.zip" \) -exec cp {} release/ \;
          cd release
          sha256sum * > SHA256SUMS
          cat SHA256SUMS
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.check-version.outputs.new_version }}
          name: Release v${{ needs.check-version.outputs.new_version }}
          files: release/*
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

